@page "/ViewProject/{ProjectId:int}/ViewSprint/{Id:int}"
@using global::Shared.Model
@using global::Shared.DTOs
@using System.Security.Claims
@using HttpClients.ClientInterfaces
@inject ISprintService SprintService;
@inject IProjectService ProjectService;
@using HttpClients.Implementations
@using UIComponents
<h3>View Sprint</h3>


@if (!string.IsNullOrEmpty(_msg))@* display any msg in case it has ny value in case of error*@
{
    <div>
        <span>@_msg</span>
    </div>
}
&nbsp; 
&nbsp; 
&nbsp; 
&nbsp; 
&nbsp; 
&nbsp;
&nbsp;
&nbsp;
&nbsp;
@if (!string.IsNullOrEmpty(_msg)) @* display any msg in case it has ny value in case of error*@
{
    <div>
        <span>@_msg</span>
    </div>
}

@if (_userStories == null)
{
    <span>Loading..UserStories</span>
}
else if (!_userStories.Any())
{
    <span>No user stories to be found</span>
}
else
{
    <table class="table justify-content-center" align="center">
        <thead>
        <tr>
            <th class="text-center">Title</th>
            <th class="text-center">Priority</th>
            <th class="text-center">Story Points</th>
            <th class="text-center">Status</th>

        </tr>
        </thead>
        <tbody>
        @foreach (var userStory in _userStories)
        {
            <tr >
                <td class="text-center">@userStory.Body</td>
                <td class="text-center">@userStory.Priority</td>
                <td class="text-center">@userStory.StoryPoints</td>
                <td class="text-center">@userStory.Status</td>
            </tr>
        }


        </tbody>
    </table>
}


    <PlusMinus Checked="@doShowUserStory" OnChange="@(() => doShowUserStory = !doShowUserStory)" /> 
    @if (doShowUserStory)
    {
@*         <div>Select user story to add: *@
@*              *@
@*                 <div class="input-box"> *@
@*                     <select @bind="storyId"> *@
@* @foreach (UserStory userStory in _otherUserStories) *@
@* { *@
@*     <option value="@userStory.Body">@userStory.Body</option> *@
@* } *@
@*                     </select> *@
@*                 </div> *@
@*              *@
@*             <button @onclick="() => AddUserStory()" class="acceptbtn"> Add to Sprint </button> *@
@*         </div> *@
        <div>
            Select user story to add:
            <div class="input-box">
                <select @bind="storyId">
                    @foreach (UserStory userStory in _otherUserStories)
                    {
                        <option value="@userStory.ID">@userStory.Body</option>
                    }
                </select>
            
<MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => AddUserStory())">Add to sprint</MudButton>
            </div> 
            </div>

            }



@code {


    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private string _msg = "";
    private IEnumerable<UserStory>? _userStories;
    private List<UserStory>? _otherUserStories;

    private ClaimsPrincipal? _user;
    private SprintHttpClient sprintService;

    private bool doShowUserStory;
    private int storyId;
    private int body;

    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public int ProjectId { get; set; }





    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadUserStoriesAsync();
            await LoadOtherStoriesAsync();

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private async Task LoadUserStoriesAsync()
    {
        _userStories = await SprintService.GetUserStoriesFromSprint(Id);
    }

    private async Task LoadOtherStoriesAsync()
    {
        var allStories = await ProjectService.GetUserStoriesAsync(ProjectId);
        _otherUserStories = new List<UserStory>();
        foreach (UserStory story in allStories)
        {
    //if (!_userStories.Contains(story))
            if (_userStories.FirstOrDefault(userStory => userStory.ID == story.ID) == null)
            {
                _otherUserStories.Add(story);
            }
        }
    }

    private async Task AddUserStory()
    {
        await SprintService.AddUserStoryToSprint(Id, storyId);
        await LoadUserStoriesAsync();

    }

}
    