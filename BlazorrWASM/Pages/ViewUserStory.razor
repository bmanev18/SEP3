@page "/ViewProject/{ProjectId:int}/ViewUserStory/{StoryId:int}"
@using UIComponents
@inject IProjectService ProjectService
@inject ISprintService SprintService
@inject IUserStoryService UserStoryService;
@using global::Shared.Model
@using global::Shared.DTOs
@using global::UIComponents
@using HttpClients.ClientInterfaces
@using System.Security.AccessControl
@inject NavigationManager NavMgr

@*
<AuthorizeView roles="scrum master">
    <Authorized>*@
        <h3>View User Story</h3>
        <div id="addTask">
            <PlusMinus Checked="@_showFields" OnChange="@(() => _showFields = !_showFields)"/>
            @if (_showFields)
            {
                <input type="text" placeholder="Task Name" @bind="_name" @bind:event="oninput">

                <select @bind="_assignee">
                    @if (_collaborators != null)
                    {
                        foreach (var collaborator in _collaborators)
                        {
                            <option value=@collaborator.Username> @($"{collaborator.FirstName} {collaborator.LastName}")</option>
                        }
                    }
                </select>

                <StoryPoints Points="@_points"/>

                <div class="input-box button">
                    @if (!string.IsNullOrEmpty(_msg))
                    {
                        <label style="color :red"> @_msg </label>
                    }
                    <button @onclick="Create" class="createbtn"> Create </button>
                </div>
            }
        </div>

        @if (_tasks == null)
        {
            <span>Loading..tasks</span>
        }
        else if (!_tasks.Any())
        {
            <span>No tasks to be found</span>
        }
        else
        {
            <table class="table">
                <thead>
                <tr>
                    <th>Status</th>
                    <th>Task</th>
                    <th>Assigned</th>
                    <th>Story Points</th>
                    <th></th>
                </tr>
                </thead>
                <tbody>
                @foreach (var task in _tasks)
                {
                    <tr>
                        <td>
                            @* <FancyCheckBox IsCompleted="@task.Status" OnChange="@(status => UpdateStatus(task.Id, status))"/> *@
                        </td>
                        <td>
                            <label for="@task.Id" onclick="@(() => EditTask(task))">@task.Body</label>
                        </td>
                        <td>
                            @task.Assignee
                        </td>
                        <td>
                            @task.StoryPoint
                        </td>
                        <td>
                            @* <DeleteButton/> *@
                            <button class="btn" @onclick="() => Open(task.Id)">Edit </button>
                        </td>

                    </tr>
                }
                </tbody>
            </table>
        }
    @*</Authorized>
    <NotAuthorized>*@
        @*@if (_tasks == null)
                {
                    <span>Loading..tasks</span>
                }
                else if (!_tasks.Any())
                {
                    <span>No tasks to be found</span>
                }
                else
                {
                    <table class="table">
                        <thead>
                        <tr>
                            <th>Status</th>
                            <th>Task</th>
                            <th>Assigned</th>
                            <th>Story Points</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var task in _tasks)
                        {
                            <tr>
                                <td>
                                    $1$ <FancyCheckBox IsCompleted="@task.Status" OnChange="@(status => UpdateStatus(task.Id, status))"/> #1#
                                </td>
                                <td>
                                    <label for="@task.Id" onclick="@(() => EditTask(task))">@task.Body</label>
                                </td>
                                <td>
                                    @task.Assignee
                                </td>
                                <td>
                                    @task.StoryPoint
                                </td>

                            </tr>
                        }
                        </tbody>
                    </table>
                }*@
    @*</NotAuthorized>
</AuthorizeView>*@

@code {
    private int _id = 0;
    private string _name = "";
    private string _assignee = "";
    private int _points = 0;

    private bool _showFields = false;
    private string _msg = "";

    private IEnumerable<UserFinderDto>? _collaborators;
    private IEnumerable<SprintTask>? _tasks;


    [Parameter]
    public int ProjectId { get; set; }

    [Parameter]
    public int StoryId { get; set; }
    

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadCollaborators();
            await LoadTasks();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }

    }

    private async Task LoadCollaborators()
    {
        var allCollaborators = await ProjectService.GetAllCollaborators(ProjectId);
        _collaborators = allCollaborators.Where(dto => dto.Role.Equals("developer")).ToList();
    }

    private async Task Create()
    {
        var dto = new SprintTaskCreationDto(StoryId,_assignee,_name, _points);
        Console.WriteLine(1);
        await SprintService.CreateTask(dto);
        Console.WriteLine(2);
        await LoadTasks();
        Console.WriteLine(3);
    }

    private async Task UpdateStatus(int taskId, bool status)
    {
    /*var toUpdate = _tasks.FirstOrDefault(task => task.Id == taskId)!;
        await SprintService.UpdateTask(toUpdate);*/
    }

    private async Task LoadTasks()
    {
        _tasks = await UserStoryService.GetTasks(StoryId);
    }

    private async Task RemoveTask(SprintTask SprintTask)
    {
    /*var SprintTask = _tasks.FirstOrDefault(model => model.Id == taskId);
        _tasks.ToList().Remove(SprintTask);*/
    }

    private void EditTask(SprintTask task)
    {
    //NavigationManager.NavigateTo($"/EditTask/{ProjectId}/{StoryId}/task?taskId={task.Id}&name={task.Name}&assignee={task.Assignee}&points={task.Points}");
    }
    
    private async void Open(int id)
    {
        NavMgr.NavigateTo($"/ViewProject/{ProjectId}/ViewUserStory/{StoryId}/EditTask/{id}");
    }

}
