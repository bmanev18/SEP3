@page "/ViewProject/{ProjectId:int}/ViewUserStory/{StoryId:int}"
@using UIComponents
@inject IProjectService ProjectService
@inject ISprintService SprintService
@inject IUserStoryService UserStoryService;
@using global::Shared.Model
@using global::Shared.DTOs
@using global::UIComponents
@using HttpClients.ClientInterfaces
@using System.Security.AccessControl
@inject NavigationManager NavMgr


<AuthorizeView roles="scrum master, project manager">
    <Authorized>
        @if (userStory != null)
        {
            <h3>User Story: @userStory.Body</h3> <!-- Display the name of the user story dynamically -->
        }

        <div id="addTask">
            <PlusMinus Checked="@_showFields" OnChange="@(() => _showFields = !_showFields)"/>
            @if (_showFields)
            {
                <input type="text" placeholder="Task Name" @bind="_name" @bind:event="oninput">

                <select @bind="_assignee">
                    @if (_collaborators != null)
                    {
                        foreach (var collaborator in _collaborators)
                        {
                            <option value=@collaborator.Username> @($"{collaborator.FirstName} {collaborator.LastName}")</option>
                        }
                    }
                </select>

                <select @bind="_points">
                    <option value="0">0</option>
                    <option value="1">1</option>
                    <option value="2">2</option>
                    <option value="3">3</option>
                    <option value="5">5</option>
                    <option value="8">8</option>
                    <option value="13">13</option>
                    <option value="20">20</option>
                    <option value="40">40</option>
                    <option value="100">100</option>
                </select>
                
                <div class="input-box button">
                    @if (!string.IsNullOrEmpty(_msg))
                    {
                        <label style="color :red"> @_msg </label>
                    }
                    <button @onclick="Create" class="createbtn"> Create </button>
                </div>
            }
        </div>

        @if (_tasks == null)
        {
            <span>Loading..tasks</span>
        }
        else if (!_tasks.Any())
        {
            <span>No tasks to be found</span>
        }
        else
        {
            <table class="table">
                <thead>
                <tr>
                    <th>Status</th>
                    <th>Task</th>
                    <th>Assigned</th>
                    <th>Story Points</th>
                    <th></th>
                </tr>
                </thead>
                <tbody>
                @foreach (var task in _tasks)
                {
                    <tr>
                        <td>
                            @task.Status
                        </td>
                        <td>
                            <label for="@task.Id">@task.Body</label>
                        </td>
                        <td>
                            @task.Assignee
                        </td>
                        <td>
                            @task.StoryPoint
                        </td>
                        <td>
                           
                            <button class="btn" @onclick="() => Open(task.Id)">Edit </button>
                        </td>
                        <td>
                            @* <DeleteButton/> *@
                            <button class="btn" @onclick="() => RemoveTask(task.Id)">Delete </button>
                        </td>

                    </tr>
                }
                </tbody>
            </table>
        }
        </Authorized>
    <NotAuthorized>
         @if (userStory != null)
                {
                    <h3>User Story: @userStory.Body</h3> <!-- Display the name of the user story dynamically -->
                }
        
                @if (_tasks == null)
                {
                    <span>Loading..tasks</span>
                }
                else if (!_tasks.Any())
                {
                    <span>No tasks to be found</span>
                }
                else
                {
                    <table class="table">
                        <thead>
                        <tr>
                            <th>Status</th>
                            <th>Task</th>
                            <th>Assigned</th>
                            <th>Story Points</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var task in _tasks)
                        {
                            <tr>
                                <td>
                                    @task.Status
                                </td>
                                <td>
                                    <label for="@task.Id">@task.Body</label>
                                </td>
                                <td>
                                    @task.Assignee
                                </td>
                                <td>
                                    @task.StoryPoint
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                }
    </NotAuthorized>
    </AuthorizeView>

@code {
    private string _status = "to-do";
    private int _id = 0;
    private string _name = "";
    private string _assignee = "";
    private int _points = 0;

    private bool _showFields = false;
    private string _msg = "";

    private IEnumerable<UserFinderDto>? _collaborators;
    private IEnumerable<SprintTask>? _tasks;
    private UserStory userStory;

    [Parameter]
    public int ProjectId { get; set; }

    [Parameter]
    public int StoryId { get; set; }
    

    protected override async Task OnInitializedAsync()
    {
        try
        {
            
            await LoadCollaborators();
            await LoadTasks();
            await LoadUserStory();


        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private async Task LoadCollaborators()
    {
        var allCollaborators = await ProjectService.GetAllCollaborators(ProjectId);
        _collaborators = allCollaborators.Where(dto => dto.Role.Equals("developer")).ToList();
    }

    private async Task Create()
    {

        var dto = new SprintTaskCreationDto
        {
            UserStoryId =   StoryId,
            Assignee = _assignee,
            Body = _name,
            StoryPoint = _points
        };
        Console.WriteLine(1);

        await UserStoryService.CreateTask(dto);
        await LoadTasks();
    }

    private async Task LoadTasks()
    {
        _tasks = await UserStoryService.GetTasks(StoryId);
    }

    private async Task RemoveTask(int id)
    {
        var taskToRemove = _tasks.FirstOrDefault(t => t.Id == id);
        if (taskToRemove != null)
        {
            await UserStoryService.RemoveTask(id, StoryId); // Remove the task from the backend using the service method
            _tasks = _tasks.Where(t => t.Id != id); // Remove the task from the local collection
        }
    }

    private async void Open(int id)
    {
        NavMgr.NavigateTo($"/ViewProject/{ProjectId}/ViewUserStory/{StoryId}/EditTask/{id}");
    }
   
    private async Task LoadUserStory()
    {
        IEnumerable<UserStory>? userStories = await ProjectService.GetUserStoriesAsync(ProjectId);
        userStory = userStories.FirstOrDefault(us => us.ID == StoryId);
        
    }



}
