@*
$1$ @page "/ViewProject/{ProjectId:int}/ViewUserStory/{StoryId:int}/EditTask/{TaskId:int}" #1#
$1$ @using UIComponents #1#
$1$ @inject IProjectService ProjectService #1#
$1$ @inject ISprintService SprintService #1#
$1$ @using global::Shared.Model #1#
$1$ @using global::Shared.DTOs #1#
$1$ @using global::UIComponents #1#
$1$ @using HttpClients.ClientInterfaces #1#
$1$ @using System.Security.AccessControl #1#
$1$ @inject NavigationManager NavMgr #1#
$1$ #1#
$1$ <h2>Edit Task</h2> #1#
$1$ <div id="editTask"> #1#
$1$   #1#
$1$         <input type="text" placeholder="Task Name" @bind="_name" @bind:event="oninput"> #1#
$1$ #1#
$1$         <select @bind="_assignee"> #1#
$1$             @if (_collaborators != null) #1#
$1$             { #1#
$1$                 foreach (var collaborator in _collaborators) #1#
$1$                 { #1#
$1$                     <option value=@collaborator.Username> @($"{collaborator.FirstName} {collaborator.LastName}")</option> #1#
$1$                 } #1#
$1$             } #1#
$1$         </select> #1#
$1$ #1#
$1$         <StoryPoints Points="@_points"/> #1#
$1$ #1#
$1$         $2$ <div class="input-box button"> #2# #1#
$1$         $2$     @if (!string.IsNullOrEmpty(_msg)) #2# #1#
$1$         $2$     { #2# #1#
$1$         $2$         <label style="color :red"> @_msg </label> #2# #1#
$1$         $2$     } #2# #1#
$1$         $2$     <button @onclick="Create" class="createbtn"> Create </button> #2# #1#
$1$         $2$ </div> #2# #1#
$1$     } #1#
$1$ </div>  #1#
$1$ #1#
$1$ @if (task == null) #1#
$1$ { #1#
$1$     <span>Loading..task</span> #1#
$1$ } #1#
$1$ else #1#
$1$ { #1#
$1$     <table class="table"> #1#
$1$         <thead> #1#
$1$         <tr> #1#
$1$             <th>Status</th> #1#
$1$             <th>Task</th> #1#
$1$             <th>Assigned</th> #1#
$1$             <th>Story Points</th> #1#
$1$             <th></th> #1#
$1$         </tr> #1#
$1$         </thead> #1#
$1$         <tbody> #1#
$1$         <tr> #1#
$1$             <td> #1#
$1$                 <FancyCheckBox IsCompleted="@task.Status" OnChange="@(status => UpdateStatus(task.Id, status))"/> #1#
$1$             </td> #1#
$1$             <td> #1#
$1$                 <label for="@task.Id" onclick="@(() => EditTask1(task))">@task.Body</label> #1#
$1$             </td> #1#
$1$             <td> #1#
$1$                 @task.Assignee #1#
$1$             </td> #1#
$1$             <td> #1#
$1$                 @task.StoryPoint #1#
$1$             </td> #1#
$1$ #1#
$1$         </tr> #1#
$1$         } #1#
$1$         } #1#
$1$         </tbody> #1#
$1$     </table> #1#
$1$ #1#
$1$ @code { #1#
$1$ #1#
$1$     private SprintTask task; #1#
$1$     private string _name = ""; #1#
//$1$     private string _assignee = ""; #1#
$1$     private int _points = 0; #1#
$1$ #1#
$1$     private bool _showFields = false; #1#
$1$     private string _msg = ""; #1#
$1$ #1#
$1$     private IEnumerable<UserFinderDto>? _collaborators; #1#
$1$     private IEnumerable<SprintTask>? _tasks; #1#
$1$ #1#
$1$ #1#
$1$ #1#
$1$     [Parameter] #1#
$1$     public int ProjectId { get; set; } #1#
$1$ #1#
$1$     [Parameter] #1#
$1$     public int StoryId { get; set; } #1#
$1$ #1#
$1$     [Parameter] #1#
$1$     public int TaskId { get; set; } #1#
$1$ #1#
$1$ #1#
$1$     protected override async Task OnInitializedAsync() #1#
$1$     { #1#
$1$         try #1#
$1$         { #1#
$1$             await LoadCollaborators(); #1#
$1$             await LoadTask(); #1#
$1$              #1#
$1$         } #1#
$1$         catch (Exception e) #1#
$1$         { #1#
$1$             Console.WriteLine(e); #1#
$1$         } #1#
$1$ #1#
$1$     } #1#
$1$ #1#
$1$     private async Task LoadCollaborators() #1#
$1$     { #1#
$1$          _collaborators = (await ProjectService.GetAllCollaborators(ProjectId)).Where(dto => dto.Role.Equals("developer")); #1#
$1$     } #1#
$1$ #1#
$1$     private async Task LoadTask() #1#
$1$     { #1#
$1$         _tasks = await SprintService.GetTasks(StoryId); #1#
$1$         @foreach (SprintTask task1 in _tasks) #1#
$1$         { #1#
$1$             if (task1.Id == TaskId) task = task1; #1#
$1$         } #1#
$1$     } #1#
$1$ #1#
$1$ #1#
$1$     private async Task UpdateStatus(int taskId, bool status) #1#
$1$     { #1#
$1$     /*var toUpdate = _tasks.FirstOrDefault(task => task.Id == taskId)!; #1#
$1$         await SprintService.UpdateTask(toUpdate);*/ #1#
$1$     } #1#
$1$      #1#
$1$ #1#
$1$     private async Task RemoveTask(SprintTask SprintTask) #1#
$1$     { #1#
$1$     /*var SprintTask = _tasks.FirstOrDefault(model => model.Id == taskId); #1#
$1$         _tasks.ToList().Remove(SprintTask);*/ #1#
$1$     } #1#
$1$ #1#
$1$     private void EditTask1(SprintTask task) #1#
$1$     { #1#
$1$     //NavigationManager.NavigateTo($"/EditTask/{ProjectId}/{StoryId}/task?taskId={task.Id}&name={task.Name}&assignee={task.Assignee}&points={task.Points}"); #1#
$1$     } #1#
$1$ #1#
$1$ }} #1#

@page "/ViewProject/{ProjectId:int}/ViewUserStory/{StoryId:int}/EditTask/{TaskId:int}"
@using UIComponents
@inject IProjectService ProjectService
@inject ISprintService SprintService
@using global::Shared.Model
@using global::Shared.DTOs
@using global::UIComponents
@using HttpClients.ClientInterfaces
@using System.Security.AccessControl
@inject NavigationManager NavMgr

<h2>Edit Task</h2>
$1$ <div id="editTask"> #1#
$1$   #1#
$1$         <input type="text" placeholder="Task Name" @bind="_name" @bind:event="oninput"> #1#
$1$ #1#
$1$         <select @bind="_assignee"> #1#
$1$             @if (_collaborators != null) #1#
$1$             { #1#
$1$                 foreach (var collaborator in _collaborators) #1#
$1$                 { #1#
$1$                     <option value=@collaborator.Username> @($"{collaborator.FirstName} {collaborator.LastName}")</option> #1#
$1$                 } #1#
$1$             } #1#
$1$         </select> #1#
$1$ #1#
$1$         <StoryPoints Points="@_points"/> #1#
$1$ #1#
$1$         $2$ <div class="input-box button"> #2# #1#
$1$         $2$     @if (!string.IsNullOrEmpty(_msg)) #2# #1#
$1$         $2$     { #2# #1#
$1$         $2$         <label style="color :red"> @_msg </label> #2# #1#
$1$         $2$     } #2# #1#
$1$         $2$     <button @onclick="Create" class="createbtn"> Create </button> #2# #1#
$1$         $2$ </div> #2# #1#
$1$     } #1#
$1$ </div>  #1#
@if (task == null)
{
    <span>Loading task...</span>
}
else
{
    <div id="editTask">
        <div>
            <label for="taskName">Task Name</label>
            <input type="text" id="taskName" value="@task.Body" @oninput="UpdateName" />
        </div>

        <div>
            <label for="assignee">Assignee</label>
            <select id="assignee" value="@task.Assignee" @onchange="UpdateAssignee">
                @if (_collaborators != null)
                {
                    foreach (var collaborator in _collaborators)
                    {
                        <option value="@collaborator.Username"> @($"{collaborator.FirstName} {collaborator.LastName}")</option>
                    }
                }
            </select>
        </div>

        $1$ <div> #1#
        $1$     <label for="status">Status</label> #1#
        $1$     <select id="status" value="@task.Status" @onchange="UpdateStatus"> #1#
        $1$         <option value="true">Completed</option> #1#
        $1$         <option value="false">Not Completed</option> #1#
        $1$     </select> #1#
        $1$ </div> #1#

        <div>
            <label for="points">Story Points</label>
            <input type="number" id="points" value="@task.StoryPoint" @oninput="UpdatePoints" />
        </div>

        <div class="input-box button">
            @if (!string.IsNullOrEmpty(_msg))
            {
                <label style="color: red"> @_msg </label>
            }
            <button @onclick="SaveChanges" class="createbtn"> Save Changes </button>
        </div>
    </div>
}

@code {
    private SprintTask task;
    private string _msg = "";
    private IEnumerable<UserFinderDto>? _collaborators;

    [Parameter]
    public int ProjectId { get; set; }

    [Parameter]
    public int StoryId { get; set; }

    [Parameter]
    public int TaskId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadCollaborators();
            await LoadTask();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private async Task LoadCollaborators()
    {
        _collaborators = (await ProjectService.GetAllCollaborators(ProjectId)).Where(dto => dto.Role.Equals("developer"));
    }

    private async Task LoadTask()
    {
        var tasks = await SprintService.GetTasks(StoryId);
        task = tasks.FirstOrDefault(t => t.Id == TaskId) ?? new SprintTask(); 

    }

    private void UpdateName(ChangeEventArgs e)
    {
        task.Body = e.Value.ToString();
    }

    private void UpdateAssignee(ChangeEventArgs e)
    {
        task.Assignee = e.Value.ToString();
    }

    private void UpdateStatus(ChangeEventArgs e)
    {
        // task.Status = bool.Parse(e.Value.ToString());
    }

    private void UpdatePoints(ChangeEventArgs e)
    {
        task.StoryPoint = int.Parse(e.Value.ToString());
    }

   
    private async Task SaveChanges()
    {
        try
        {
            await SprintService.UpdateTask(task);
    // Optionally, you can add a success message or navigate to a different page after saving the changes.
        }
        catch (Exception ex)
        {
            _msg = "Failed to save changes: " + ex.Message;
        }
    }
}
*@
