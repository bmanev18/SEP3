@* @page "/ViewProject/{ProjectId:int}/ViewUserStory/{StoryId:int}/EditTask/{TaskId:int}" *@
@* @using UIComponents *@
@* @inject IProjectService ProjectService *@
@* @inject ISprintService SprintService *@
@* @using global::Shared.Model *@
@* @using global::Shared.DTOs *@
@* @using global::UIComponents *@
@* @using HttpClients.ClientInterfaces *@
@* @using System.Security.AccessControl *@
@* @inject NavigationManager NavMgr *@
@* *@
@* <h2>Edit Task</h2> *@
@* <div id="editTask"> *@
@*   *@
@*         <input type="text" placeholder="Task Name" @bind="_name" @bind:event="oninput"> *@
@* *@
@*         <select @bind="_assignee"> *@
@*             @if (_collaborators != null) *@
@*             { *@
@*                 foreach (var collaborator in _collaborators) *@
@*                 { *@
@*                     <option value=@collaborator.Username> @($"{collaborator.FirstName} {collaborator.LastName}")</option> *@
@*                 } *@
@*             } *@
@*         </select> *@
@* *@
@*         <StoryPoints Points="@_points"/> *@
@* *@
@*         $1$ <div class="input-box button"> #1# *@
@*         $1$     @if (!string.IsNullOrEmpty(_msg)) #1# *@
@*         $1$     { #1# *@
@*         $1$         <label style="color :red"> @_msg </label> #1# *@
@*         $1$     } #1# *@
@*         $1$     <button @onclick="Create" class="createbtn"> Create </button> #1# *@
@*         $1$ </div> #1# *@
@*     } *@
@* </div>  *@
@* *@
@* @if (task == null) *@
@* { *@
@*     <span>Loading..task</span> *@
@* } *@
@* else *@
@* { *@
@*     <table class="table"> *@
@*         <thead> *@
@*         <tr> *@
@*             <th>Status</th> *@
@*             <th>Task</th> *@
@*             <th>Assigned</th> *@
@*             <th>Story Points</th> *@
@*             <th></th> *@
@*         </tr> *@
@*         </thead> *@
@*         <tbody> *@
@*         <tr> *@
@*             <td> *@
@*                 <FancyCheckBox IsCompleted="@task.Status" OnChange="@(status => UpdateStatus(task.Id, status))"/> *@
@*             </td> *@
@*             <td> *@
@*                 <label for="@task.Id" onclick="@(() => EditTask1(task))">@task.Body</label> *@
@*             </td> *@
@*             <td> *@
@*                 @task.Assignee *@
@*             </td> *@
@*             <td> *@
@*                 @task.StoryPoint *@
@*             </td> *@
@* *@
@*         </tr> *@
@*         } *@
@*         } *@
@*         </tbody> *@
@*     </table> *@
@* *@
@* @code { *@
@* *@
@*     private SprintTask task; *@
@*     private string _name = ""; *@
@*     private string _assignee = ""; *@
@*     private int _points = 0; *@
@* *@
@*     private bool _showFields = false; *@
@*     private string _msg = ""; *@
@* *@
@*     private IEnumerable<UserFinderDto>? _collaborators; *@
@*     private IEnumerable<SprintTask>? _tasks; *@
@* *@
@* *@
@* *@
@*     [Parameter] *@
@*     public int ProjectId { get; set; } *@
@* *@
@*     [Parameter] *@
@*     public int StoryId { get; set; } *@
@* *@
@*     [Parameter] *@
@*     public int TaskId { get; set; } *@
@* *@
@* *@
@*     protected override async Task OnInitializedAsync() *@
@*     { *@
@*         try *@
@*         { *@
@*             await LoadCollaborators(); *@
@*             await LoadTask(); *@
@*              *@
@*         } *@
@*         catch (Exception e) *@
@*         { *@
@*             Console.WriteLine(e); *@
@*         } *@
@* *@
@*     } *@
@* *@
@*     private async Task LoadCollaborators() *@
@*     { *@
@*          _collaborators = (await ProjectService.GetAllCollaborators(ProjectId)).Where(dto => dto.Role.Equals("developer")); *@
@*     } *@
@* *@
@*     private async Task LoadTask() *@
@*     { *@
@*         _tasks = await SprintService.GetTasks(StoryId); *@
@*         @foreach (SprintTask task1 in _tasks) *@
@*         { *@
@*             if (task1.Id == TaskId) task = task1; *@
@*         } *@
@*     } *@
@* *@
@* *@
@*     private async Task UpdateStatus(int taskId, bool status) *@
@*     { *@
@*     /*var toUpdate = _tasks.FirstOrDefault(task => task.Id == taskId)!; *@
@*         await SprintService.UpdateTask(toUpdate);*/ *@
@*     } *@
@*      *@
@* *@
@*     private async Task RemoveTask(SprintTask SprintTask) *@
@*     { *@
@*     /*var SprintTask = _tasks.FirstOrDefault(model => model.Id == taskId); *@
@*         _tasks.ToList().Remove(SprintTask);*/ *@
@*     } *@
@* *@
@*     private void EditTask1(SprintTask task) *@
@*     { *@
@*     //NavigationManager.NavigateTo($"/EditTask/{ProjectId}/{StoryId}/task?taskId={task.Id}&name={task.Name}&assignee={task.Assignee}&points={task.Points}"); *@
@*     } *@
@* *@
@* }} *@

@page "/ViewProject/{ProjectId:int}/ViewUserStory/{StoryId:int}/EditTask/{TaskId:int}"
@using UIComponents
@inject IProjectService ProjectService
@inject ISprintService SprintService
@using global::Shared.Model
@using global::Shared.DTOs
@using global::UIComponents
@using HttpClients.ClientInterfaces
@using System.Security.AccessControl
@inject NavigationManager NavMgr

<h2>Edit Task</h2>
@* <div id="editTask"> *@
@*   *@
@*         <input type="text" placeholder="Task Name" @bind="_name" @bind:event="oninput"> *@
@* *@
@*         <select @bind="_assignee"> *@
@*             @if (_collaborators != null) *@
@*             { *@
@*                 foreach (var collaborator in _collaborators) *@
@*                 { *@
@*                     <option value=@collaborator.Username> @($"{collaborator.FirstName} {collaborator.LastName}")</option> *@
@*                 } *@
@*             } *@
@*         </select> *@
@* *@
@*         <StoryPoints Points="@_points"/> *@
@* *@
@*         $1$ <div class="input-box button"> #1# *@
@*         $1$     @if (!string.IsNullOrEmpty(_msg)) #1# *@
@*         $1$     { #1# *@
@*         $1$         <label style="color :red"> @_msg </label> #1# *@
@*         $1$     } #1# *@
@*         $1$     <button @onclick="Create" class="createbtn"> Create </button> #1# *@
@*         $1$ </div> #1# *@
@*     } *@
@* </div>  *@
@if (task == null)
{
    <span>Loading task...</span>
}
else
{
    <div id="editTask">
        <div>
            <label for="taskName">Task Name</label>
            <input type="text" id="taskName" value="@task.Body" @oninput="UpdateName" />
        </div>

        <div>
            <label for="assignee">Assignee</label>
            <select id="assignee" value="@task.Assignee" @onchange="UpdateAssignee">
                @if (_collaborators != null)
                {
                    foreach (var collaborator in _collaborators)
                    {
                        <option value="@collaborator.Username"> @($"{collaborator.FirstName} {collaborator.LastName}")</option>
                    }
                }
            </select>
        </div>

        @* <div> *@
        @*     <label for="status">Status</label> *@
        @*     <select id="status" value="@task.Status" @onchange="UpdateStatus"> *@
        @*         <option value="true">Completed</option> *@
        @*         <option value="false">Not Completed</option> *@
        @*     </select> *@
        @* </div> *@

        <div>
            <label for="points">Story Points</label>
            <input type="number" id="points" value="@task.StoryPoint" @oninput="UpdatePoints" />
        </div>

        <div class="input-box button">
            @if (!string.IsNullOrEmpty(_msg))
            {
                <label style="color: red"> @_msg </label>
            }
            <button @onclick="SaveChanges" class="createbtn"> Save Changes </button>
        </div>
    </div>
}

@code {
    private SprintTask task;
    private string _msg = "";
    private IEnumerable<UserFinderDto>? _collaborators;

    [Parameter]
    public int ProjectId { get; set; }

    [Parameter]
    public int StoryId { get; set; }

    [Parameter]
    public int TaskId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadCollaborators();
            await LoadTask();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private async Task LoadCollaborators()
    {
        _collaborators = (await ProjectService.GetAllCollaborators(ProjectId)).Where(dto => dto.Role.Equals("developer"));
    }

    private async Task LoadTask()
    {
        var tasks = await SprintService.GetTasks(StoryId);
        task = tasks.FirstOrDefault(t => t.Id == TaskId) ?? new SprintTask(); 

    }

    private void UpdateName(ChangeEventArgs e)
    {
        task.Body = e.Value.ToString();
    }

    private void UpdateAssignee(ChangeEventArgs e)
    {
        task.Assignee = e.Value.ToString();
    }

    private void UpdateStatus(ChangeEventArgs e)
    {
        // task.Status = bool.Parse(e.Value.ToString());
    }

    private void UpdatePoints(ChangeEventArgs e)
    {
        task.StoryPoint = int.Parse(e.Value.ToString());
    }

   
    private async Task SaveChanges()
    {
        try
        {
            await SprintService.UpdateTask(task);
    // Optionally, you can add a success message or navigate to a different page after saving the changes.
        }
        catch (Exception ex)
        {
            _msg = "Failed to save changes: " + ex.Message;
        }
    }
}
