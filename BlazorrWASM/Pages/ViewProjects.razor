@page "/ViewProjects"
@using HttpClients.ClientInterfaces
@inject IUserService UserService
@inject NavigationManager NavMgr
@using global::Shared.Model
@using System.Security.Claims
&nbsp; 
&nbsp; 
&nbsp; 

<h3>My Projects</h3>


@if (!string.IsNullOrEmpty(_msg))@* display any msg in case it has ny value in case of error*@
{
    <div>
        <span>@_msg</span>
    </div>
}
&nbsp;
@if (_projects == null)
{
    <span>Loading..</span>
}
else if (!_projects.Any())
{
    <span>No projects to be found</span>
}
else 
{
    <table class="table justify-content-center">
        
        <tbody>
            @foreach (Project project in _projects)
            {
                <tr>
                    <td class="text-center"><h5>@project.Title</h5></td>
                    <td> <MudButton @onclick="() => Open(project.Id)" Size="Size.Small" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Style="background-color: #16a085;" Class="mt-1 text-white">View</MudButton></td>
                    <td><MudButton Variant="Variant.Filled" Size="Size.Small" Style="background-color: #16a085;" EndIcon="@Icons.Material.Filled.Send" OnClick="@(() => OpenMeetingNotes(project.Id))" Class="mt-1 text-white">Create note</MudButton> </td>
                 <td><MudButton Variant="Variant.Filled" Size="Size.Small" Style="background-color: #16a085;" EndIcon="@Icons.Material.Filled.Send" OnClick="@(() => OpenViewTeam(project.Id) )" Class="mt-1 text-white">See team</MudButton> </td>
                    </tr>
            }
        </tbody>

    </table>
}
<style>
*{
           margin: 0;
           padding: 0;
           box-sizing: border-box;
           font-family: 'Poppins',sans-serif;
       }
</style>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    private string _msg = "";
    private IEnumerable<Project>? _projects;
    //private static ProjectDto? _project;
    //private string _body = "";
    private ClaimsPrincipal? _user;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;
        _user = authState.User;
        _msg = "";
        Console.WriteLine(_msg);
        try
        {

            _projects = await UserService.GetProjectsByUsernameAsync(_user.Identity?.Name);
        }
        catch(Exception e)
        {
            Console.WriteLine(e);
        }
    }
    
    private void Open(int id)
    {
        NavMgr.NavigateTo($"/ViewProject/{id}");
    }
    private void OpenMeetingNotes(int id)
    {
        NavMgr.NavigateTo($"/CreateMeetingNote/{id}");
    }
    
    private void OpenViewTeam(int id)
    {
        NavMgr.NavigateTo($"/ViewTeam/{id}");
    }
}
